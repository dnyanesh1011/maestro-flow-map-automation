# Name of your automated workflow
name: Run Maestro Tests

# Trigger: runs on a push to the main branch
on:
  push:
    branches: [ "main" ]

# Defines the jobs to be performed
jobs:
  run-android-tests:
    # Use the latest Ubuntu virtual machine
    runs-on: ubuntu-latest

    # Sequence of steps to execute
    steps:
      # 1. Checks out your repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Sets up Java (required for Android)
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Sets up Node.js (to install Maestro)
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 4. NEW: Install Android SDK Command Line Tools and accept licenses
      - name: Setup Android SDK
        run: |
          # Download and unzip the Android SDK command line tools
          wget -O android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p android-sdk/cmdline-tools
          unzip -d android-sdk/cmdline-tools android-sdk.zip
          mv android-sdk/cmdline-tools/cmdline-tools android-sdk/cmdline-tools/latest

          # Set environment variables for the Android SDK
          echo "ANDROID_HOME=$GITHUB_WORKSPACE/android-sdk" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$GITHUB_WORKSPACE/android-sdk/platform-tools" >> $GITHUB_PATH
          
          # Accept the SDK licenses to prevent errors
          yes | sdkmanager --licenses

      # 5. Installs the Maestro CLI
      - name: Install Maestro
        run: npm install -g maestro-cli

      # 6. Run the Maestro test using YOUR file names
      - name: Run Maestro Test
        run: maestro test --app-file google_map_app.apk Google_Maps_test.yaml
